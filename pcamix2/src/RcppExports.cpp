// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// applym
NumericVector applym(NumericMatrix x, int margin, String s);
RcppExport SEXP _pcamix2_applym(SEXP xSEXP, SEXP marginSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type margin(marginSEXP);
    Rcpp::traits::input_parameter< String >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(applym(x, margin, s));
    return rcpp_result_gen;
END_RCPP
}
// isNA
LogicalMatrix isNA(NumericMatrix x);
RcppExport SEXP _pcamix2_isNA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(isNA(x));
    return rcpp_result_gen;
END_RCPP
}
// missing_mean
NumericVector missing_mean(NumericVector C1);
RcppExport SEXP _pcamix2_missing_mean(SEXP C1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type C1(C1SEXP);
    rcpp_result_gen = Rcpp::wrap(missing_mean(C1));
    return rcpp_result_gen;
END_RCPP
}
// applymissingmean
NumericMatrix applymissingmean(NumericMatrix x, int margin);
RcppExport SEXP _pcamix2_applymissingmean(SEXP xSEXP, SEXP marginSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type margin(marginSEXP);
    rcpp_result_gen = Rcpp::wrap(applymissingmean(x, margin));
    return rcpp_result_gen;
END_RCPP
}
// myscale
NumericMatrix myscale(NumericMatrix x, NumericVector mu, NumericVector sd);
RcppExport SEXP _pcamix2_myscale(SEXP xSEXP, SEXP muSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(myscale(x, mu, sd));
    return rcpp_result_gen;
END_RCPP
}
// myrecodquant
List myrecodquant(NumericMatrix X);
RcppExport SEXP _pcamix2_myrecodquant(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(myrecodquant(X));
    return rcpp_result_gen;
END_RCPP
}
// sweepS
NumericMatrix sweepS(NumericMatrix x, NumericVector y, int marg);
RcppExport SEXP _pcamix2_sweepS(SEXP xSEXP, SEXP ySEXP, SEXP margSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type marg(margSEXP);
    rcpp_result_gen = Rcpp::wrap(sweepS(x, y, marg));
    return rcpp_result_gen;
END_RCPP
}
// sweepM
NumericMatrix sweepM(NumericMatrix a, NumericVector b, int n);
RcppExport SEXP _pcamix2_sweepM(SEXP aSEXP, SEXP bSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(sweepM(a, b, n));
    return rcpp_result_gen;
END_RCPP
}
// sweepD
NumericMatrix sweepD(NumericMatrix a, NumericVector b, int n);
RcppExport SEXP _pcamix2_sweepD(SEXP aSEXP, SEXP bSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(sweepD(a, b, n));
    return rcpp_result_gen;
END_RCPP
}
// mysvd
List mysvd(Eigen::MatrixXd x);
RcppExport SEXP _pcamix2_mysvd(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(mysvd(x));
    return rcpp_result_gen;
END_RCPP
}
// myqrrank
double myqrrank(Eigen::MatrixXd x);
RcppExport SEXP _pcamix2_myqrrank(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(myqrrank(x));
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_hello_world
Eigen::MatrixXd rcppeigen_hello_world();
RcppExport SEXP _pcamix2_rcppeigen_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcppeigen_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_outerproduct
Eigen::MatrixXd rcppeigen_outerproduct(const Eigen::VectorXd& x);
RcppExport SEXP _pcamix2_rcppeigen_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_innerproduct
double rcppeigen_innerproduct(const Eigen::VectorXd& x);
RcppExport SEXP _pcamix2_rcppeigen_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_bothproducts
Rcpp::List rcppeigen_bothproducts(const Eigen::VectorXd& x);
RcppExport SEXP _pcamix2_rcppeigen_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_pcamix2_applym", (DL_FUNC) &_pcamix2_applym, 3},
    {"_pcamix2_isNA", (DL_FUNC) &_pcamix2_isNA, 1},
    {"_pcamix2_missing_mean", (DL_FUNC) &_pcamix2_missing_mean, 1},
    {"_pcamix2_applymissingmean", (DL_FUNC) &_pcamix2_applymissingmean, 2},
    {"_pcamix2_myscale", (DL_FUNC) &_pcamix2_myscale, 3},
    {"_pcamix2_myrecodquant", (DL_FUNC) &_pcamix2_myrecodquant, 1},
    {"_pcamix2_sweepS", (DL_FUNC) &_pcamix2_sweepS, 3},
    {"_pcamix2_sweepM", (DL_FUNC) &_pcamix2_sweepM, 3},
    {"_pcamix2_sweepD", (DL_FUNC) &_pcamix2_sweepD, 3},
    {"_pcamix2_mysvd", (DL_FUNC) &_pcamix2_mysvd, 1},
    {"_pcamix2_myqrrank", (DL_FUNC) &_pcamix2_myqrrank, 1},
    {"_pcamix2_rcppeigen_hello_world", (DL_FUNC) &_pcamix2_rcppeigen_hello_world, 0},
    {"_pcamix2_rcppeigen_outerproduct", (DL_FUNC) &_pcamix2_rcppeigen_outerproduct, 1},
    {"_pcamix2_rcppeigen_innerproduct", (DL_FUNC) &_pcamix2_rcppeigen_innerproduct, 1},
    {"_pcamix2_rcppeigen_bothproducts", (DL_FUNC) &_pcamix2_rcppeigen_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_pcamix2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
